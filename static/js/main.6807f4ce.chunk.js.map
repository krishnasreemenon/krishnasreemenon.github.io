{"version":3,"sources":["components/images/8.jpg","components/images/2.jpg","components/images/3.jpg","components/images/6.jpg","components/Home.js","components/SecondPage.js","components/ThirdPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","Container","styled","div","_templateObject","secondImage","Heading","h5","_templateObject2","bottomValues","before","present","after","FlexCenter","_templateObject3","props","inView","Graduation","_templateObject4","graduation","Description","_templateObject5","SecondPage","_useState","useState","_useState2","Object","slicedToArray","setInView","useEffect","window","addEventListener","console","log","scrollY","Happy","ThirdPage_templateObject","happy","Desp","ThirdPage_templateObject2","desp","CallLink","ThirdPage_templateObject3","ThirdPage","style","background","width","height","zIndex","href","App","react_fullpage_default","scrollBar","render","_ref","state","fullPageApi","components_Home","components_SecondPage","components_ThirdPage","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6807f4ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/8.503daebe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.65ccbedc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.0abbbd84.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.989d9a64.jpg\";","import React from 'react';\nimport '../styles/home.scss';\n\nconst Home = () => {\n  return (\n    <div>\n      <h1 className=\"animate__animated animate__jackInTheBox\">\n        Happy Birthday!!!\n      </h1>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport secondImage from './images/8.jpg';\nimport graduation from './images/2.jpg';\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  @media (max-width: 500px) {\n    height: 90vh;\n  }\n  background: url(${secondImage});\n  background-size: 100%;\n  background-position-x: center;\n  background-position-y: center;\n  background-repeat: no-repeat;\n  background-color: #420e10;\n`;\n\nconst Heading = styled.h5`\n  width: 100%;\n  text-align: center;\n  font-family: 'Permanent Marker', cursive;\n  color: #c51c0e;\n  position: absolute;\n  top: 30px;\n  /* right: 100px; */\n  font-size: 34px;\n  background: rgba(0, 0, 0, 0.5);\n`;\n\nconst bottomValues = {\n  before: '-100px',\n  present: '200px',\n  after: '-200px',\n};\n\nconst FlexCenter = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  transition: all 0.5s;\n  bottom: ${(props) => bottomValues[props.inView]};\n  z-index: 2;\n`;\n\nconst Graduation = styled.div`\n  background: url(${graduation});\n  width: 276px;\n  height: 224px;\n  position: absolute;\n  /* z-index: 1000; */\n  background-size: 100%;\n  box-shadow: 10px 10px 0px 0px red;\n`;\n\nconst Description = styled.div`\n  visibility: ${(props) => (props.inView === 'present' ? 'visible' : 'hidden')};\n  transition: all 0.5s;\n  display: flex;\n  flex-direction: row;\n  position: absolute;\n  width: 100%;\n  height: ${(props) => (props.inView === 'present' ? '100%' : '0px')};\n  justify-content: center;\n  align-items: center;\n  p {\n    color: white;\n    background: rgba(0, 0, 0, 0.5);\n    font-family: monospace;\n    font-size: 14px;\n    text-align: center;\n  }\n`;\n\nconst SecondPage = () => {\n  const [inView, setInView] = useState('before');\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      console.log('scrolling!', window.scrollY);\n      if (window.scrollY > 600 && window.scrollY < 1000) {\n        setInView('present');\n      } else if (window.scrollY < 600) {\n        setInView('before');\n      } else {\n        setInView('after');\n      }\n    });\n  }, []);\n  return (\n    <Container>\n      <Heading>\n        Crappy Year! <br /> But you're here!\n      </Heading>\n      <Description inView={inView}>\n        <p>\n          You got way too drunk for a person who's just a year into legal\n          drinking age!\n        </p>\n      </Description>\n      <FlexCenter inView={inView}>\n        <Graduation />\n      </FlexCenter>\n    </Container>\n  );\n};\n\nexport default SecondPage;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport happy from './images/3.jpg';\nimport desp from './images/6.jpg';\n\nconst Happy = styled.div`\n  visibility: ${(props) => (props.inView ? 'visible' : 'hidden')};\n  transition: all 4s;\n  background: url(${happy});\n  background-size: 100%;\n  background-position-x: center;\n  background-position-y: center;\n  width: 210px;\n  height: 209px;\n  position: absolute;\n  left: 10px;\n  bottom: ${(props) => (props.inView ? '150px' : '-200px')};\n  z-index: 20;\n  box-shadow: 10px 10px 0px 0px red;\n`;\n\nconst Desp = styled.div`\n  visibility: ${(props) => (props.inView ? 'visible' : 'hidden')};\n  transition: all 2s;\n  background: url(${desp});\n  background-size: 100%;\n  background-position-x: center;\n  background-position-y: center;\n  width: 210px;\n  height: 209px;\n  position: absolute;\n  right: 10px;\n  bottom: ${(props) => (props.inView ? '150px' : '-100px')};\n  z-index: 20;\n  box-shadow: 10px 10px 0px 0px red;\n`;\n\nconst CallLink = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  a {\n    font-family: monospace;\n    color: #000;\n    text-decoration: none;\n  }\n`;\n\nconst ThirdPage = () => {\n  const [inView, setInView] = useState(false);\n  useEffect(() => {\n    window.addEventListener('scroll', () => {\n      console.log('scrolling!', window.scrollY);\n      if (window.scrollY > 1500) {\n        setInView(true);\n      } else {\n        setInView(false);\n      }\n    });\n  }, []);\n  return (\n    <div style={{ background: 'white', width: '100vw', height: '100vh' }}>\n      <h1 style={{ zIndex: '20' }}>Love You!</h1>\n      <CallLink>\n        <a href=\"tel:+917907543259\">That's all! Now click here!</a>\n      </CallLink>\n      <Happy inView={inView} />\n      <Desp inView={inView} />\n    </div>\n  );\n};\n\nexport default ThirdPage;\n","import React from 'react';\nimport ReactFullpage from '@fullpage/react-fullpage';\nimport Home from './components/Home';\nimport SecondPage from './components/SecondPage';\nimport ThirdPage from './components/ThirdPage';\n\nconst App = () => (\n  <ReactFullpage\n    scrollBar={true}\n    render={({ state, fullPageApi }) => {\n      return (\n        <div>\n          <div className=\"section\">\n            <Home />\n          </div>\n          <div className=\"section\">\n            <SecondPage />\n          </div>\n          <div className=\"section\">\n            <ThirdPage />\n          </div>\n        </div>\n      );\n    }}\n  />\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}